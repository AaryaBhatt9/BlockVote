[{"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\index.js":"1","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\reportWebVitals.js":"2","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\App.jsx":"3","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Home.js":"4","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\Navbar.js":"5","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\CoverPage.jsx":"6","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Admin.js":"7","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Vote.js":"8","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\utils\\getWeb3.js":"9","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CoverLayout.jsx":"10","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CandidateCard.js":"11","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CandidateForm.js":"12","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\VotersForm.jsx":"13"},{"size":628,"mtime":1667638478588,"results":"14","hashOfConfig":"15"},{"size":364,"mtime":1667638478614,"results":"16","hashOfConfig":"15"},{"size":757,"mtime":1667638478533,"results":"17","hashOfConfig":"15"},{"size":2599,"mtime":1667638478925,"results":"18","hashOfConfig":"15"},{"size":2905,"mtime":1667638478753,"results":"19","hashOfConfig":"15"},{"size":1545,"mtime":1667638478895,"results":"20","hashOfConfig":"15"},{"size":6488,"mtime":1667638478870,"results":"21","hashOfConfig":"15"},{"size":4651,"mtime":1667638478953,"results":"22","hashOfConfig":"15"},{"size":1143,"mtime":1667638478986,"results":"23","hashOfConfig":"15"},{"size":1711,"mtime":1667638478726,"results":"24","hashOfConfig":"15"},{"size":1155,"mtime":1667638478675,"results":"25","hashOfConfig":"15"},{"size":1251,"mtime":1667638478701,"results":"26","hashOfConfig":"15"},{"size":1237,"mtime":1667638478776,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g7d5f9",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\index.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\reportWebVitals.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\App.jsx",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Home.js",["57"],"import { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Vote from \"./Vote\";\nimport Admin from \"./Admin\";\nimport ElectionContract from \"../contracts/Election.json\";\nimport getWeb3 from \"../utils/getWeb3\";\n\nexport default function Home() {\n  const [role, setRole] = useState(2);\n  const [web3, setWeb3] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const loadWeb3 = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ElectionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ElectionContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setWeb3(web3);\n      setCurrentAccount(accounts[0]);\n      setContract(instance);\n      console.log(\"init\");\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const getRole = async () => {\n    if (contract) {\n      const user = await contract.methods.getRole(currentAccount).call();\n      setRole(parseInt(user));\n      console.log(\"role:\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadWeb3();\n  }, []);\n\n  useEffect(() => {\n    getRole();\n  }, [contract]);\n\n  return (\n    <Box\n      sx={{\n        bgcolor: \"background.default\",\n        color: \"text.primary\",\n        height: \"100vh\",\n      }}\n    >\n      {loading ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"80vh\",\n          }}\n        >\n          Loading...\n        </Box>\n      ) : (\n        <Box>\n          {role === 1 && (\n            <Admin\n              role={role}\n              contract={contract}\n              web3={web3}\n              currentAccount={currentAccount}\n            />\n          )}\n\n          {role === 2 && (\n            <Vote\n              role={role}\n              contract={contract}\n              web3={web3}\n              currentAccount={currentAccount}\n            />\n          )}\n\n          {role === 3 && (\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"80vh\",\n              }}\n            >\n              Unauthorized User\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\CoverPage.jsx",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Admin.js",["58"],"import { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\n\nimport Candidate from \"../components/CandidateCard\";\nimport CandidateForm from \"../components/CandidateForm\";\nimport VotersForm from \"../components/VotersForm\";\n\nexport default function Admin({ role, contract, web3, currentAccount }) {\n  const [electionState, setElectionState] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [candidates, setCandidates] = useState([]);\n\n  const [open, setOpen] = useState(false);\n\n  const getCandidates = async () => {\n    if (contract) {\n      console.log(contract);\n      const count = await contract.methods.candidatesCount().call();\n      const temp = [];\n      for (let i = 0; i < count; i++) {\n        const candidate = await contract.methods.getCandidateDetails(i).call();\n        temp.push({ name: candidate[0], votes: candidate[1] });\n      }\n      setCandidates(temp);\n      setLoading(false);\n      console.log(temp);\n    }\n  };\n\n  const getElectionState = async () => {\n    if (contract) {\n      const state = await contract.methods.electionState().call();\n      setElectionState(parseInt(state));\n    }\n  };\n\n  useEffect(() => {\n    getElectionState();\n    getCandidates();\n  }, [contract]);\n\n  const handleEnd = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleAgree = async () => {\n    if (electionState === 0) {\n      try {\n        if (contract) {\n          await contract.methods.startElection().send({ from: currentAccount });\n          getElectionState();\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    } else if (electionState === 1) {\n      try {\n        if (contract) {\n          await contract.methods.endElection().send({ from: currentAccount });\n          getElectionState();\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <Box>\n      {loading ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"80vh\",\n          }}\n        >\n          Loading...\n        </Box>\n      ) : (\n        <Box>\n          <Grid container sx={{ mt: 0 }} spacing={4}>\n            <Grid item xs={12}>\n              <Typography align=\"center\" variant=\"h6\" color=\"textSecondary\">\n                ELECTION STATUS :{\" \"}\n                {electionState === 0 && \"Election has not started.\"}\n                {electionState === 1 && \"Election is in progress.\"}\n                {electionState === 2 && \"Election has ended.\"}\n              </Typography>\n              <Divider />\n            </Grid>\n            {electionState !== 2 && (\n              <Grid item xs={12} sx={{ display: \"flex\" }}>\n                <Button\n                  variant=\"contained\"\n                  sx={{ width: \"40%\", margin: \"auto\" }}\n                  onClick={handleEnd}\n                >\n                  {electionState === 0 && \"Start Election\"}\n                  {electionState === 1 && \"End Election\"}\n                </Button>\n              </Grid>\n            )}\n\n            <Grid item xs={12}>\n              <Typography align=\"center\" variant=\"h6\">\n                {electionState === 0 && \"ADD VOTERS / CANDIDATES\"}\n                {electionState === 1 && \"SEE LIVE RESULTS\"}\n                {electionState === 2 && \"FINAL ELECTION RESULT\"}\n              </Typography>\n              <Divider />\n            </Grid>\n\n            {electionState === 0 && (\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  overflowY: \"hidden\",\n                  overflowX: \"auto\",\n                  display: \"flex\",\n                  width: \"98vw\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    width: \"100%\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <VotersForm\n                    contract={contract}\n                    web3={web3}\n                    currentAccount={currentAccount}\n                  />\n                  <CandidateForm\n                    contract={contract}\n                    web3={web3}\n                    currentAccount={currentAccount}\n                  />\n                </Box>\n              </Grid>\n            )}\n\n            {electionState > 0 && (\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  overflowY: \"hidden\",\n                  overflowX: \"auto\",\n                  display: \"flex\",\n                  width: \"98vw\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {candidates &&\n                  candidates.map((candidate, index) => (\n                    <Box sx={{ mx: 2 }} key={index}>\n                      <Candidate\n                        id={index}\n                        name={candidate.name}\n                        voteCount={candidate.votes}\n                      />\n                    </Box>\n                  ))}\n              </Grid>\n            )}\n          </Grid>\n\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                {electionState === 0 && \"Do you want to start the election?\"}\n                {electionState === 1 && \"Do you want to end the election?\"}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Disagree</Button>\n              <Button onClick={handleAgree} autoFocus>\n                Agree\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Box>\n      )}\n    </Box>\n  );\n}\n","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\screens\\Vote.js",["59","60","61"],"import { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\n\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\n\nimport Candidate from \"../components/CandidateCard\";\n\nexport default function Vote({ role, contract, web3, currentAccount }) {\n  // const [loading, setLoading] = useState(true);\n  const [candidates, setCandidates] = useState([]);\n  const [vote, setVote] = useState(null);\n  const [electionState, setElectionState] = useState(0);\n\n  const [open, setOpen] = useState(false);\n\n  const getCandidates = async () => {\n    if (contract) {\n      const count = await contract.methods.candidatesCount().call();\n      const temp = [];\n      for (let i = 0; i < count; i++) {\n        const candidate = await contract.methods.getCandidateDetails(i).call();\n        temp.push({ name: candidate[0], votes: candidate[1] });\n      }\n      setCandidates(temp);\n      // setLoading(false);\n    }\n  };\n\n  const voteCandidate = async (candidate) => {\n    try {\n      if (contract) {\n        await contract.methods.vote(candidate).send({ from: currentAccount });\n        getCandidates();\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const getElectionState = async () => {\n    if (contract) {\n      const state = await contract.methods.electionState().call();\n      setElectionState(parseInt(state));\n    }\n  };\n\n  useEffect(() => {\n    getElectionState();\n    getCandidates();\n  }, [contract]);\n\n  const handleVoteChange = (event) => {\n    setVote(event.target.value);\n  };\n\n  const handleVote = (event) => {\n    event.preventDefault();\n    voteCandidate(vote);\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleVote}>\n        <Grid container sx={{ mt: 0 }} spacing={6} justifyContent=\"center\">\n          <Grid item xs={12}>\n            <Typography align=\"center\" variant=\"h6\">\n              {electionState === 0 &&\n                \"Please Wait... Election has not started yet.\"}\n              {electionState === 1 && \"VOTE FOR YOUR FAVOURITE CANDIDATE\"}\n              {electionState === 2 &&\n                \"Election has ended. See the results below.\"}\n            </Typography>\n            <Divider />\n          </Grid>\n          {electionState === 1 && (\n            <>\n              <Grid item xs={12}>\n                <FormControl>\n                  <RadioGroup\n                    row\n                    sx={{\n                      overflowY: \"hidden\",\n                      overflowX: \"auto\",\n                      display: \"flex\",\n                      width: \"98vw\",\n                      justifyContent: \"center\",\n                    }}\n                    value={vote}\n                    onChange={handleVoteChange}\n                  >\n                    {candidates.map((candidate, index) => (\n                      <FormControlLabel\n                        key={index}\n                        labelPlacement=\"top\"\n                        control={<Radio />}\n                        value={index}\n                        label={<Candidate id={index} name={candidate.name} />}\n                      />\n                    ))}\n                  </RadioGroup>\n                </FormControl>\n              </Grid>\n              <Grid item xs={6}>\n                <div style={{ margin: 20 }}>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{ width: \"100%\" }}\n                  >\n                    Vote\n                  </Button>\n                </div>\n              </Grid>\n            </>\n          )}\n\n          {electionState === 2 && (\n            <Grid\n              item\n              xs={12}\n              sx={{\n                overflowY: \"hidden\",\n                overflowX: \"auto\",\n                display: \"flex\",\n                width: \"98vw\",\n                justifyContent: \"center\",\n              }}\n            >\n              {candidates &&\n                candidates.map((candidate, index) => (\n                  <Box sx={{ mx: 2 }} key={index}>\n                    <Candidate\n                      id={index}\n                      name={candidate.name}\n                      voteCount={candidate.votes}\n                    />\n                  </Box>\n                ))}\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </Box>\n  );\n}\n","C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\utils\\getWeb3.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CoverLayout.jsx",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CandidateCard.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\CandidateForm.js",[],"C:\\Users\\bhatt\\OneDrive\\Documents\\BlockVote\\client\\src\\components\\VotersForm.jsx",[],{"ruleId":"62","severity":1,"message":"63","line":50,"column":6,"nodeType":"64","endLine":50,"endColumn":16,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":48,"column":6,"nodeType":"64","endLine":48,"endColumn":16,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":21,"column":10,"nodeType":"70","messageId":"71","endLine":21,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":21,"column":16,"nodeType":"70","messageId":"71","endLine":21,"endColumn":23},{"ruleId":"62","severity":1,"message":"66","line":57,"column":6,"nodeType":"64","endLine":57,"endColumn":16,"suggestions":"73"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRole'. Either include it or remove the dependency array.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'getCandidates' and 'getElectionState'. Either include them or remove the dependency array.",["75"],"no-unused-vars","'open' is assigned a value but never used.","Identifier","unusedVar","'setOpen' is assigned a value but never used.",["76"],{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"79","fix":"81"},"Update the dependencies array to be: [contract, getRole]",{"range":"82","text":"83"},"Update the dependencies array to be: [contract, getCandidates, getElectionState]",{"range":"84","text":"85"},{"range":"86","text":"85"},[1422,1432],"[contract, getRole]",[1632,1642],"[contract, getCandidates, getElectionState]",[1767,1777]]