{"ast":null,"code":"import Web3 from \"web3\";\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        // Accounts now exposed\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"sources":["C:/Users/bhatt/OneDrive/Documents/BlockVote/client/src/utils/getWeb3.js"],"sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B;EACAC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAY;IAC1C;IACA,IAAID,MAAM,CAACE,QAAQ,EAAE;MACnB,MAAMC,IAAI,GAAG,IAAIR,IAAI,CAACK,MAAM,CAACE,QAAQ,CAAC;MACtC,IAAI;QACF;QACA,MAAMF,MAAM,CAACE,QAAQ,CAACE,MAAM,EAAE;QAC9B;QACAN,OAAO,CAACK,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdN,MAAM,CAACM,KAAK,CAAC;MACf;IACF;IACA;IAAA,KACK,IAAIL,MAAM,CAACG,IAAI,EAAE;MACpB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAAI;MACxBG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCT,OAAO,CAACK,IAAI,CAAC;IACf;IACA;IAAA,KACK;MACH,MAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAS,CAACC,YAAY,CAC9C,uBAAuB,CACxB;MACD,MAAMP,IAAI,GAAG,IAAIR,IAAI,CAACa,QAAQ,CAAC;MAC/BF,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DT,OAAO,CAACK,IAAI,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEJ,eAAeP,OAAO"},"metadata":{},"sourceType":"module"}